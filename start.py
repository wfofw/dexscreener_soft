import requests as r
import asyncio
import aiohttp
from pyppeteer import connect
from logger import setup_logger
import psycopg2
import dotenv
import os
import re

dotenv.load_dotenv('F:\\shitcode\\birge_api\\config.env')

URL = "https://dexscreener.com/solana?rankBy=trendingScoreH6&order=desc"

logger = setup_logger()

def get_conn():
    return psycopg2.connect(
        host=os.getenv('DB_HOST'),
        dbname=os.getenv('DB_NAME'),
        port=os.getenv('DB_PORT'),
        user=os.getenv('DB_USER'),
        password=os.getenv('DB_PASSWORD')
    )

async def find_element(page_or_frame, selector, is_xpath=False, attempts=15, delay=1, click=False, get_text=False, get_all_matches=False, index=0, wait_time=1.5):
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å —ç–ª–µ–º–µ–Ω—Ç–æ–º.

    :param page_or_frame: —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∏–ª–∏ —Ñ—Ä–µ–π–º
    :param selector: CSS-—Å–µ–ª–µ–∫—Ç–æ—Ä –∏–ª–∏ XPath
    :param is_xpath: –µ—Å–ª–∏ True, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è XPath, –∏–Ω–∞—á–µ ‚Äî CSS-—Å–µ–ª–µ–∫—Ç–æ—Ä
    :param attempts: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –Ω–∞–π—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç
    :param delay: –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    :param click: –µ—Å–ª–∏ True, –±—É–¥–µ—Ç –∫–ª–∏–∫ –ø–æ —ç–ª–µ–º–µ–Ω—Ç—É
    :param get_text: –µ—Å–ª–∏ True, –≤–µ—Ä–Ω–µ—Ç —Ç–µ–∫—Å—Ç —ç–ª–µ–º–µ–Ω—Ç–∞
    :param get_all_matches: —É—Å–ª–∏ True, –≤–µ—Ä–Ω–µ—Ç –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
    :param index: –∏–Ω–¥–µ–∫—Å —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ
    :param wait_time: –æ–∂–∏–¥–∞–Ω–∏–µ –ø–æ—Å–ª–µ –∫–ª–∏–∫–∞ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
    :return: –Ω–∞–π–¥–µ–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –∏–ª–∏ None
    """
    logger.info(f"üîç –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫ —ç–ª–µ–º–µ–Ω—Ç–∞: {selector} (–ø–æ–ø—ã—Ç–æ–∫: {attempts})")

    for attempt in range(attempts):
        try:
            logger.info(f"üîÑ –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{attempts}...")

            # –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã
            if is_xpath:
                elements = await page_or_frame.xpath(selector)
            else:
                elements = await page_or_frame.querySelectorAll(selector)

            if elements:
                logger.info(f"‚úÖ –≠–ª–µ–º–µ–Ω—Ç –Ω–∞–π–¥–µ–Ω –Ω–∞ –ø–æ–ø—ã—Ç–∫–µ {attempt + 1}!")

                # –ï—Å–ª–∏ True, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
                if get_all_matches:
                    logger.info("‚úÖ –í–µ—Ä–Ω—É–ª–∏ –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã.")
                    # return elements
                    
                    if get_text:
                        list_of_texts = [await (await x.getProperty("innerText")).jsonValue() for x in elements]
                        return list_of_texts
                    else:
                        return elements
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —ç–ª–µ–º–µ–Ω—Ç —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –∏–Ω–¥–µ—Å–æ–º
                elif len(elements) > index and index >= 0:
                    element = elements[index]
                    # –ï—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è –∫–ª–∏–∫ ‚Äî –∫–ª–∏–∫–∞–µ–º
                    if click:
                        logger.info(f"üîò –í—ã–ø–æ–ª–Ω—è–µ–º –∫–ª–∏–∫ –ø–æ —ç–ª–µ–º–µ–Ω—Ç—É [{index}]...")
                        await element.click()
                        logger.info("‚úÖ –ö–ª–∏–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω.")
                        await asyncio.sleep(wait_time)                                                                                        
                    
                    if get_text:
                        logger.info(f"üîò –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç...")
                        prop = await element.getProperty("innerText")
                        logger.info("‚úÖ –¢–µ–∫—Å—Ç –ø–æ–ª—É—á–µ–Ω.")
                        return await prop.jsonValue()
                    
                    return element
                elif index >= len(elements):
                    logger.error(f"‚ùå Index out of range.")
                    raise IndexError
                else:
                    logger.error(f"‚ùå –≠–ª–µ–º–µ–Ω—Ç {selector} –Ω–µ –Ω–∞–π–¥–µ–Ω —Å—Ä–µ–¥–∏ {len(elements)} –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö.")
                    return False

            # –û–∂–∏–¥–∞–Ω–∏–µ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π
            await asyncio.sleep(delay)

        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –Ω–∞ –ø–æ–ø—ã—Ç–∫–µ {attempt + 1}: {e}")
    
    logger.error("‚ùå –≠–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫.")
    return False


async def get_ws_url():
    async with aiohttp.ClientSession() as session:
        async with session.get(f'http://localhost:{os.getenv('CHROME_PORT')}/json/version') as resp:
            data = await resp.json()
            return data['webSocketDebuggerUrl']


async def manipul(page):
    await page.waitForSelector('a.ds-dex-table-row.ds-dex-table-row-top', {'timeout': 10000})


    data = await page.evaluate("""
    () => Array.from(document.querySelectorAll('a.ds-dex-table-row.ds-dex-table-row-top')).map(row => ({
    token: row.querySelector('.ds-dex-table-row-base-token-symbol')?.innerText.trim() ?? null,
    age: row.querySelector('.ds-table-data-cell.ds-dex-table-row-col-pair-age')?.innerText.trim() ?? null,
    marketCap: row.querySelector('.ds-table-data-cell.ds-dex-table-row-col-market-cap')?.innerText.trim() ?? null,
    }))
    """)
    
    with get_conn() as conn, conn.cursor() as cur:
        query = "insert into newtb (tokenname, tokenage, tokenmcap) values (%s, %s, %s)"
        list_of_tuple = []

        for i in data:
            params = []

            # –í—ã–≤–æ–¥ –≤–Ω–æ—Å–∏–º–æ–π –∏–Ω—Ñ—ã
            print(f"{i['token']} - {i['marketCap']} - {i['age']}")
            token_name = i['token'].lower()
            params.append(token_name)

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞—Ö–æ–¥ –≤–æ–∑—Ä–∞—Å—Ç–∞
            age_match = re.match(r"(\d+)([a-zA-Z]+)", f'{i['age']}')
            if not age_match:
                continue
            age, age_unit = age_match.groups()

            # –ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ –≤–æ–∑—Ä–∞—Å—Ç–∞ –∫ –µ–¥–∏–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É (–¥–Ω–∏)
            age = int(age)
            if age_unit == 'mo':
                age = age * 30
            elif age_unit == 'y':
                age = age * 365
            params.append(age)

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞—Ö–æ–¥ –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏–∏
            mcap_match = re.match(r"([\d\.]+)([a-zA-Z]+)", i['marketCap'][1:])
            if not mcap_match:
                continue
            mcap, mcap_unit = mcap_match.groups()
            
            # –ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏–∏ –∫ –µ–¥–∏–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É
            mcap = float(mcap)
            if mcap_unit == 'K':
                mcap = mcap * 1000
            elif mcap_unit == 'M':
                mcap = mcap * 1000000
            elif mcap_unit == 'B':
                mcap = mcap * 1000000000
            params.append(int(mcap))

            list_of_tuple.append(tuple(params))

        cur.executemany(query, list_of_tuple)
        
        conn.commit()
        

async def start_browser():
    try:
        ws = await get_ws_url()
        browser = await connect(
            browserWSEndpoint=ws
        )

        page = (await browser.pages())[0]

        await page.goto(URL)

        await open_page(page, browser)

    except Exception as e:
        print(e)

async def open_page(page, browser):
    text_of_pairs = await find_element(
        page, 
        "//div[contains(@class, 'chakra-stack custom-tyhwsl')]",
        True,
        get_text=True
    ) # Like a ,,Showing pairs 1-100 of 60,746,,

    amount_of_pages = int(''.join([x for x in text_of_pairs.split(' ')[4] if x.isdigit()]))//100+1
    
    print(amount_of_pages)

    await manipul(page)

    for i in range(2, 51):
        url = URL.split('?')
        url[0] += '/page-'+str(i)
        url = '?'.join(url)

        page.setDefaultNavigationTimeout(0)
        await page.goto(url, {'waitUntil': 'domcontentloaded'})

        await manipul(page)
    
    await browser.close()


if __name__ == "__main__":
    asyncio.run(start_browser())